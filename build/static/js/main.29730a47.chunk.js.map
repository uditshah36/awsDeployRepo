{"version":3,"sources":["components/FireStore.js","components/Url.js","components/DisplayUdit.js","components/Display.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","Url","updateInput","e","setState","target","name","value","addUrl","a","preventDefault","db","firestore","settings","timestampsInSnapshots","collection","add","url","state","userRef","console","log","onSubmit","this","type","onChange","React","Component","DisplayUdit","Display","props","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sTAaEA,IAASC,cAXY,CACnBC,OAAQ,0CACRC,WAAY,4BACZC,YAAa,mCACbC,UAAW,YACXC,cAAe,wBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIjBT,IAASU,YAGMV,QAAf,EC6BaW,E,YAzCX,aAAe,IAAD,8BACV,+CAKFC,YAAc,SAAAC,GACZ,EAAKC,SAAL,eACGD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SARlB,EAaZC,OAbY,uCAaH,WAAOL,GAAP,iBAAAM,EAAA,6DACPN,EAAEO,kBACIC,EAAKrB,EAASsB,aACjBC,SAAS,CACZC,uBAAuB,IAJhB,SAMeH,EAAGI,WAAW,SAASC,IAAI,CACjDC,IAAK,EAAKC,MAAMD,MAPT,OAMDE,EANC,OASTC,QAAQC,IAAI,UAAWF,GACjB,EAAKf,SAAS,CACda,IAAI,KAXD,2CAbG,sDAEV,EAAKC,MAAQ,CACZD,IAAI,IAHK,E,sEA4BN,OACI,0BAAMK,SAAUC,KAAKf,QACrB,2BACIgB,KAAK,OACblB,KAAK,MACLmB,SAAUF,KAAKrB,YACfK,MAAOgB,KAAKL,MAAMD,MAEpB,4BAAQO,KAAK,UAAb,e,GArCQE,IAAMC,WCOTC,MARf,WACI,OACI,6BACI,uDCGGC,MAPf,SAAiBC,GACb,OACI,6BACI,sC,MCWGC,MAVf,WACA,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.29730a47.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyDj-s0sADFqqBbElTFS6iDN6HlumYe4-NE\",\r\n    authDomain: \"uploadurl.firebaseapp.com\",\r\n    databaseURL: \"https://uploadurl.firebaseio.com\",\r\n    projectId: \"uploadurl\",\r\n    storageBucket: \"uploadurl.appspot.com\",\r\n    messagingSenderId: \"971715339745\",\r\n    appId: \"1:971715339745:web:3de48455271ab154a4dea0\",\r\n    measurementId: \"G-QZ2P9YJDG3\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  firebase.analytics();\r\n\r\n\r\n  export default firebase;","import React from 'react';  \r\n//import 'firebase/firestore';\r\nimport firebase from './FireStore';\r\n\r\nclass Url extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n         url:\"\"\r\n        };\r\n      }\r\n      updateInput = e => {\r\n        this.setState({\r\n          [e.target.name]: e.target.value\r\n        });\r\n      }\r\n\r\n\r\n      addUrl = async (e) => {\r\n        e.preventDefault();\r\n        const db = firebase.firestore();\r\n        db.settings({\r\n        timestampsInSnapshots: true\r\n  });\r\n        const userRef = await db.collection(\"users\").add({\r\n        url: this.state.url\r\n  });  \r\n      console.log('userred', userRef)\r\n            this.setState({\r\n            url:\"\"\r\n      });\r\n        };\r\n                render() {\r\n            return (\r\n                <form onSubmit={this.addUrl}>\r\n                <input\r\n                    type=\"text\"\r\n            name=\"url\"\r\n            onChange={this.updateInput}\r\n            value={this.state.url}\r\n          />\r\n          <button type=\"submit\">Submit</button>\r\n        </form>\r\n        );\r\n      }\r\n   }\r\nexport default Url;","import React from 'react';\r\n\r\n\r\nfunction DisplayUdit(){\r\n    return(\r\n        <div>\r\n            <h1>Hello, I am Udit shah</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayUdit","import React from 'react';\r\n\r\nfunction Display(props){\r\n    return(\r\n        <div>\r\n            <h1>smit</h1>\r\n        </div>\r\n    )\r\n}\r\nexport default Display;","import React from 'react';\r\nimport Url from './components/Url';\r\nimport DisplayUdit from './components/DisplayUdit'\r\nimport Display from './components/Display';\r\nimport './App.css';\r\n\r\nfunction App() {\r\nreturn(\r\n  <div>\r\n    <Url />\r\n    <DisplayUdit/>\r\n    <Display />\r\n  </div>\r\n)\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}